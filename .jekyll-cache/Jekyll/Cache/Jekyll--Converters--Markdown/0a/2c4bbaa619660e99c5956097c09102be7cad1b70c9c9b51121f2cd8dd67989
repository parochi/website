I"ò'
<p><img src="assets/images/2020-11-19.jpg" alt="" /></p>

<p>Go handles concurrency in a slightly different way than the other programming languages. The effective Go has a slogan around their new concept</p>

<p>‚ÄúDo not communicate by sharing memory; instead, share memory by communicating‚Äù.</p>

<p>These Go routines are unique and they are not operating system threads. It is a function executing concurrently with other goroutines in the same address space. It is lightweight, costing little more than the allocation of stack space. More you can read at the official documentation site  <a href="https://golang.org/doc/effective_go.html#concurrency">here</a></p>

<p>Enough of the concepts, let us delve into the code and apply these concepts. First, we will implement some example code to understand the concepts, after that we will do an identical code that we typically use in production. A typical goroutine is written below.</p>

<!-- HTML generated using hilite.me -->
<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%">1
2
3
4
5</pre></td><td><pre style="margin: 0; line-height: 125%">sayHello := <span style="color: #000080; font-weight: bold">func</span>() {
    fmt.Println(<span style="color: #0000FF">&quot;Techiebar is awesome!&quot;</span>)
}
<span style="color: #000080; font-weight: bold">go</span> sayHello()
<span style="color: #008800; font-style: italic">// continue doing rest of your code</span>
</pre></td></tr></table></div>

<p>Now, when you execute the above snippet, you might not see the output string <code class="language-plaintext highlighter-rouge">Techiebar is awesome!</code> that is due to the fact that the main thread might get finished its job well before the goroutine. One of the ways to handle this issue is by using Go <code class="language-plaintext highlighter-rouge">sync</code> package, check the below snippet.</p>

<!-- HTML generated using hilite.me -->
<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">var</span> wg sync.WaitGroup

wg.Add(<span style="color: #0000FF">1</span>)                       
<span style="color: #000080; font-weight: bold">go</span> <span style="color: #000080; font-weight: bold">func</span>() {
    <span style="color: #000080; font-weight: bold">defer</span> wg.Done()             
    fmt.Println(<span style="color: #0000FF">&quot;7:00AM Techiebar is closed!&quot;</span>)
}()

wg.Add(<span style="color: #0000FF">1</span>)                       
<span style="color: #000080; font-weight: bold">go</span> <span style="color: #000080; font-weight: bold">func</span>() {
    <span style="color: #000080; font-weight: bold">defer</span> wg.Done()             
    fmt.Println(<span style="color: #0000FF">&quot;5:00PM Techiebar is Opened!&quot;</span>)
}()

wg.Wait()                       
fmt.Println(<span style="color: #0000FF">&quot;All goroutines completed.&quot;</span>)
</pre></td></tr></table></div>

<p><code class="language-plaintext highlighter-rouge">WaitGroup</code> is a great way to wait for a set of concurrent operations to complete when you either don‚Äôt care about the result of the concurrent operation or you have other plans to collect the results.</p>

<p>There is another interesting method in the sync package is <code class="language-plaintext highlighter-rouge">once.Do(&lt;calling method&gt;)</code>, This will make sure that the calling method will be called once, even though it triggered by different routines. Try that by writing an example and check the behavior.</p>

<p>Now, the interesting concept is about co-ordinating the multiple Goroutines using channels.
Yes, Channel is a great way of sending and receiving the values. A typical channel example looks like below.</p>

<!-- HTML generated using hilite.me -->
<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #000080; font-weight: bold">func</span> main() {
  <span style="color: #008800; font-style: italic">//We have some integers</span>
  elems := []<span style="color: #000080; font-weight: bold">int</span>{<span style="color: #0000FF">1</span>, <span style="color: #0000FF">2</span>, <span style="color: #0000FF">3</span>, <span style="color: #0000FF">4</span>, <span style="color: #0000FF">5</span>, <span style="color: #0000FF">0</span>} 

  <span style="color: #008800; font-style: italic">//Handle the sum of all integers</span>

  sum := <span style="color: #000080; font-weight: bold">func</span>(s []<span style="color: #000080; font-weight: bold">int</span>, c <span style="color: #000080; font-weight: bold">chan</span> <span style="color: #000080; font-weight: bold">int</span>) {
    sum := <span style="color: #0000FF">0</span>
    <span style="color: #000080; font-weight: bold">for</span> _, v := <span style="color: #000080; font-weight: bold">range</span> s {
      sum += v
    }
    c &lt;- sum <span style="color: #008800; font-style: italic">// sending sum to the channel</span>
  }
  <span style="color: #008800; font-style: italic">//We have created a channel of type int</span>
  <span style="color: #008800; font-style: italic">//Do note that, the channel can hold only one integer value</span>
  <span style="color: #008800; font-style: italic">// at a time</span>
  receiver := make(<span style="color: #000080; font-weight: bold">chan</span> <span style="color: #000080; font-weight: bold">int</span>)
  <span style="color: #000080; font-weight: bold">go</span> sum(elems, receiver)
  total := &lt;-receiver <span style="color: #008800; font-style: italic">// receiver returns the result of the sum</span>

  fmt.Println(total)
}
</pre></td></tr></table></div>

<p>So far everything is fine, we have routines, waitGroups, channels. But, what does a typical production code looks like to use channels with multiple goroutines. Now, let us take an example scenario where we have some 1000 requests[In production we will face 1000‚Äôs requests] that need to be processed and each request is independent and can be processed with a separate goroutine. That means if we spawn 10 goroutines as a worker pool to process the 1000 requests. Let us see how the code looks like.</p>

<!-- HTML generated using hilite.me -->
<div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><table><tr><td><pre style="margin: 0; line-height: 125%"> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td><pre style="margin: 0; line-height: 125%"><span style="color: #008800; font-style: italic">//FullName is first + last name</span>
<span style="color: #000080; font-weight: bold">type</span> FullName <span style="color: #000080; font-weight: bold">struct</span> {
	FirstName <span style="color: #000080; font-weight: bold">string</span>
	LastName  <span style="color: #000080; font-weight: bold">string</span>
}

<span style="color: #000080; font-weight: bold">func</span> main() {
	fnChannel := make(<span style="color: #000080; font-weight: bold">chan</span> FullName)
	totalWorkers := <span style="color: #0000FF">10</span>
	<span style="color: #000080; font-weight: bold">var</span> wg sync.WaitGroup

	<span style="color: #008800; font-style: italic">// You have created 10 routines to handle your 1000 requests</span>
	<span style="color: #000080; font-weight: bold">for</span> i := <span style="color: #0000FF">0</span>; i &lt; totalWorkers; i++ {
		wg.Add(<span style="color: #0000FF">1</span>)
		<span style="color: #000080; font-weight: bold">go</span> <span style="color: #000080; font-weight: bold">func</span>() {
			<span style="color: #000080; font-weight: bold">defer</span> wg.Done()
			<span style="color: #000080; font-weight: bold">for</span> fn := <span style="color: #000080; font-weight: bold">range</span> fnChannel {
				printFullName(fn)
			}
		}()
	}

	<span style="color: #008800; font-style: italic">// You have 1000 requests, needs to be processed</span>
	<span style="color: #000080; font-weight: bold">for</span> j := <span style="color: #0000FF">0</span>; j &lt;= <span style="color: #0000FF">1000</span>; j++ {
		<span style="color: #008800; font-style: italic">// You are pushing one by one to the channel</span>
		fnChannel &lt;- FullName{
			FirstName: fmt.Sprintf(<span style="color: #0000FF">&quot;F%d&quot;</span>, j),
			LastName:  fmt.Sprintf(<span style="color: #0000FF">&quot;L%d&quot;</span>, j),
		}
	}
	close(fnChannel)
	wg.Wait()
	fmt.Println(<span style="color: #0000FF">&quot;Everything completed&quot;</span>)

}

<span style="color: #000080; font-weight: bold">func</span> printFullName(fn FullName) {
	fmt.Printf(<span style="color: #0000FF">&quot;%s %s\n&quot;</span>, fn.FirstName, fn.LastName)
}
</pre></td></tr></table></div>

<p>In the above example code, at line number 8 we have created a channel that accepts the <code class="language-plaintext highlighter-rouge">FullName</code> data structure and we have created 10 workers to take up our task of processing the full name. Finally, at line number 26 we started pushing the data to the channel. Now all the 10 goroutines start processing the given data and accept another set of data until the channel is closed.</p>

<p>For more information, it is always recommended to go through the Effective  <a href="https://golang.org/doc/effective_go.html#concurrency">Go concurrency</a>  documentation.</p>

<p>Share your constructive comments or suggestions to improve the content.</p>
:ET