<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-29T13:42:12-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Parochi</title><subtitle>A Developers weekly Saga;</subtitle><author><name>Rajesh</name></author><entry><title type="html">Desktop App for 2-Factor Authentication</title><link href="http://localhost:4000/2020/12/29/desktop-app-for-mfa.html" rel="alternate" type="text/html" title="Desktop App for 2-Factor Authentication" /><published>2020-12-29T00:00:00-08:00</published><updated>2020-12-29T00:00:00-08:00</updated><id>http://localhost:4000/2020/12/29/desktop-app-for-mfa</id><content type="html" xml:base="http://localhost:4000/2020/12/29/desktop-app-for-mfa.html">&lt;div class=&quot;view overlay&quot;&gt;
	&lt;img class=&quot;card-img-top&quot; src=&quot;/assets/images/head.png&quot; alt=&quot;Card image cap&quot; /&gt;
    &lt;a href=&quot;#!&quot;&gt;
        &lt;div class=&quot;mask rgba-white-slight&quot;&gt;&lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;small class=&quot;text-muted&quot;&gt;Last updated Dec 29, 2020&lt;/small&gt;
&lt;br /&gt;
These days online security became a very challenging task. It is always a better idea to add an extra layer of security to our online accounts whenever it is possible. This will prevent others from accessing our accounts though they have got our password.&lt;/p&gt;

&lt;p&gt;Most of the online services enforce their users to follow the best existing security practices. But sometimes, these best practices hinder our ease of access. For example, Dropbox / Gmail provides an extra layer of security through their 2-Factor Authentication.&lt;/p&gt;

&lt;p class=&quot;text-info&quot;&gt;
How does this 2 Factor authentication works?
&lt;/p&gt;
&lt;p class=&quot;text-secondary&quot;&gt;
2-Factor Authentication requires an extra device owned by the user to generate a random number. Using this random number, the provider will confirm the authentication for their application. But most of the providers like Google Authenticator or Microsoft Authenticator have mobile-only apps. This limitation restricts us from using the MFA to authenticate our services one or other time.
&lt;/p&gt;

&lt;p&gt;But, there is good news that I recently came across an App (Authy) that is available both on Mobile and Desktop (including Linux). Along with that, there are multiple advantages available. Please refer to their site https://support.authy.com/hc/en-us/articles/115001943608-Welcome-to-Authy-&lt;/p&gt;

&lt;p&gt;Below is the screenshot for the Authy desktop app on my mac. This will help us when our mobile is not around or we lost it. Enjoy the comfort of the rapidly changing technology.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
  &lt;img src=&quot;/assets/images/2fa.png&quot; class=&quot;rounded mx-auto d-block&quot; alt=&quot;authy-app-on-mac&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;nav aria-label=&quot;Page navigation example&quot;&gt;
      &lt;ul class=&quot;pagination justify-content-center&quot;&gt;
        &lt;li class=&quot;page-item&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;/2020/11/19/go-concurrency.html&quot;&gt;Previous&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class=&quot;page-item disabled&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Next&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
   /*
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    
    */
    var disqus_config = function () {
    this.page.url = &quot;https://www.parochi.xyz/2020/11/17/use-makefile-for-your-daily-development-tasks.html&quot;;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = &quot;20201117&quot;; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://parochi-xyz.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Rajesh</name></author><summary type="html">Last updated Dec 29, 2020 These days online security became a very challenging task. It is always a better idea to add an extra layer of security to our online accounts whenever it is possible. This will prevent others from accessing our accounts though they have got our password.</summary></entry><entry><title type="html">Go Concurrency - A typical production use</title><link href="http://localhost:4000/2020/11/19/go-concurrency.html" rel="alternate" type="text/html" title="Go Concurrency - A typical production use" /><published>2020-11-19T00:00:00-08:00</published><updated>2020-11-19T00:00:00-08:00</updated><id>http://localhost:4000/2020/11/19/go-concurrency</id><content type="html" xml:base="http://localhost:4000/2020/11/19/go-concurrency.html">&lt;div class=&quot;view overlay&quot;&gt;
	&lt;img class=&quot;card-img-top&quot; src=&quot;/assets/images/2020-11-19.png&quot; alt=&quot;Card image cap&quot; /&gt;
    &lt;a href=&quot;#!&quot;&gt;
        &lt;div class=&quot;mask rgba-white-slight&quot;&gt;&lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;small class=&quot;text-muted&quot;&gt;Last updated Nov 19, 2020&lt;/small&gt;
&lt;br /&gt;
Go handles concurrency in a slightly different way than the other programming languages. The effective Go has a slogan around their new concept&lt;/p&gt;

&lt;p&gt;“Do not communicate by sharing memory; instead, share memory by communicating”.&lt;/p&gt;

&lt;p&gt;These Go routines are unique and they are not operating system threads. It is a function executing concurrently with other goroutines in the same address space. It is lightweight, costing little more than the allocation of stack space. More you can read at the official documentation site  &lt;a href=&quot;https://golang.org/doc/effective_go.html#concurrency&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enough of the concepts, let us delve into the code and apply these concepts. First, we will implement some example code to understand the concepts, after that we will do an identical code that we typically use in production. A typical goroutine is written below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;
sayHello := func() {
    fmt.Println(&quot;Techiebar is awesome!&quot;)
}
go sayHello()
// continue doing rest of your code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when you execute the above snippet, you might not see the output string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Techiebar is awesome!&lt;/code&gt; that is due to the fact that the main thread might get finished its job well before the goroutine. One of the ways to handle this issue is by using Go &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync&lt;/code&gt; package, check the below snippet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;
var wg sync.WaitGroup

wg.Add(1)                       
go func() {
    defer wg.Done()             
    fmt.Println(&quot;7:00AM Techiebar is closed!&quot;)
}()

wg.Add(1)                       
go func() {
    defer wg.Done()             
    fmt.Println(&quot;5:00PM Techiebar is Opened!&quot;)
}()

wg.Wait()                       
fmt.Println(&quot;All goroutines completed.&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WaitGroup&lt;/code&gt; is a great way to wait for a set of concurrent operations to complete when you either don’t care about the result of the concurrent operation or you have other plans to collect the results.&lt;/p&gt;

&lt;p&gt;There is another interesting method in the sync package is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;once.Do(&amp;lt;calling method&amp;gt;)&lt;/code&gt;, This will make sure that the calling method will be called once, even though it triggered by different routines. Try that by writing an example and check the behavior.&lt;/p&gt;

&lt;p&gt;Now, the interesting concept is about co-ordinating the multiple Goroutines using channels.
Yes, Channel is a great way of sending and receiving the values. A typical channel example looks like below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;
func main() {
  //We have some integers
  elems := []int{1, 2, 3, 4, 5, 0} 

  //Handle the sum of all integers

  sum := func(s []int, c chan int) {
    sum := 0
    for _, v := range s {
      sum += v
    }
    c &amp;lt;- sum // sending sum to the channel
  }
  //We have created a channel of type int
  //Do note that, the channel can hold only one integer value
  // at a time
  receiver := make(chan int)
  go sum(elems, receiver)
  total := &amp;lt;-receiver // receiver returns the result of the sum

  fmt.Println(total)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far everything is fine, we have routines, waitGroups, channels. But, what does a typical production code looks like to use channels with multiple goroutines. Now, let us take an example scenario where we have some 1000 requests[In production we will face 1000’s requests] that need to be processed and each request is independent and can be processed with a separate goroutine. That means if we spawn 10 goroutines as a worker pool to process the 1000 requests. Let us see how the code looks like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;go&quot;&gt;
//FullName is first + last name
type FullName struct {
	FirstName string
	LastName  string
}

func main() {
	fnChannel := make(chan FullName)
	totalWorkers := 10
	var wg sync.WaitGroup

	// You have created 10 routines to handle your 1000 requests
	for i := 0; i &amp;lt; totalWorkers; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for fn := range fnChannel {
				printFullName(fn)
			}
		}()
	}

	// You have 1000 requests, needs to be processed
	for j := 0; j &amp;lt;= 1000; j++ {
		// You are pushing one by one to the channel
		fnChannel &amp;lt;- FullName{
			FirstName: fmt.Sprintf(&quot;F%d&quot;, j),
			LastName:  fmt.Sprintf(&quot;L%d&quot;, j),
		}
	}
	close(fnChannel)
	wg.Wait()
	fmt.Println(&quot;Everything completed&quot;)

}

func printFullName(fn FullName) {
	fmt.Printf(&quot;%s %s\n&quot;, fn.FirstName, fn.LastName)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above example code, at line number 8 we have created a channel that accepts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FullName&lt;/code&gt; data structure and we have created 10 workers to take up our task of processing the full name. Finally, at line number 26 we started pushing the data to the channel. Now all the 10 goroutines start processing the given data and accept another set of data until the channel is closed.&lt;/p&gt;

&lt;p&gt;For more information, it is always recommended to go through the Effective  &lt;a href=&quot;https://golang.org/doc/effective_go.html#concurrency&quot;&gt;Go concurrency&lt;/a&gt;  documentation.&lt;/p&gt;

&lt;p&gt;Share your constructive comments or suggestions to improve the content.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;nav aria-label=&quot;Page navigation example&quot;&gt;
      &lt;ul class=&quot;pagination justify-content-center&quot;&gt;
        &lt;li class=&quot;page-item&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;/2020/11/18/day-to-day-kubernetes.html&quot;&gt;Previous&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class=&quot;page-item&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;/2020/12/29/desktop-app-for-mfa.html&quot;&gt;Next&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
   /*
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    
    */
    var disqus_config = function () {
    this.page.url = &quot;https://www.parochi.xyz/2020/11/19/go-concurrency.html&quot;;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = &quot;20201119&quot;; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://parochi-xyz.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Rajesh</name></author><summary type="html">Last updated Nov 19, 2020 Go handles concurrency in a slightly different way than the other programming languages. The effective Go has a slogan around their new concept “Do not communicate by sharing memory; instead, share memory by communicating”. These Go routines are unique and they are not operating system threads. It is a function executing concurrently with other goroutines in the same address space. It is lightweight, costing little more than the allocation of stack space. More you can read at the official documentation site here</summary></entry><entry><title type="html">Day to Day Kubernetes Commandline Reference</title><link href="http://localhost:4000/2020/11/18/day-to-day-kubernetes.html" rel="alternate" type="text/html" title="Day to Day Kubernetes Commandline Reference" /><published>2020-11-18T00:00:00-08:00</published><updated>2020-11-18T00:00:00-08:00</updated><id>http://localhost:4000/2020/11/18/day-to-day-kubernetes</id><content type="html" xml:base="http://localhost:4000/2020/11/18/day-to-day-kubernetes.html">&lt;div class=&quot;view overlay&quot;&gt;
	&lt;img class=&quot;card-img-top&quot; src=&quot;/assets/images/2020-11-18.jpg&quot; alt=&quot;Card image cap&quot; /&gt;
    &lt;a href=&quot;#!&quot;&gt;
        &lt;div class=&quot;mask rgba-white-slight&quot;&gt;&lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;small class=&quot;text-muted&quot;&gt;Last updated Nov 18, 2020&lt;/small&gt;
&lt;br /&gt;
There are multiple resources for the Kubernetes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; command line reference. It is very good practice to learn the usage of all those commands. But, here I would like to share the most day to day commands that we use on the terminal to take care of our daily development and debugging activities with respect to Kubernetes.&lt;/p&gt;

&lt;p&gt;To Get the Context&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Bash&quot;&gt;
# To get the current context
$ kubectl config current-context

# To Display list of contexts
$ kubectl config get-contexts

# Now, create the namespace in the cluster
$ kubectl create namespace &amp;lt;your namespace name&amp;gt;

# Use the namespace for the subsequent kubectl operations
$ kubectl config set-context --namespace=&amp;lt;your namespace name&amp;gt; --current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Namespace Commands&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Bash&quot;&gt;
# Describe the namespace
$ kubectl describe namespace &amp;lt;your namespace name&amp;gt;

# Get the namespace details either in yaml or json
$ kubectl get namespace blog-ns -o json
$ kubectl get namespace blog-ns -o yaml

# To list all the resources under a namespace
$ kubectl get all -n &amp;lt;your namespace name&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ConfigMap and Secretes Commands&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Bash&quot;&gt;
# Create a config map
$ kubectl create configmap &amp;lt;name of the config map&amp;gt; --from-literal=username=user --from-literal=hostname=host

# Create a secret
# Remember Secretes are namespace specific, they can not be accessed across the namespaces
$ kubectl create secret generic &amp;lt;secret name&amp;gt; --from-literal=&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;

# Whenever you store a secret, you should store them in a base64 format
$ echo -n &amp;lt;your password&amp;gt; | base64

# To decode the value
$ echo -n base64 value | base64 -decode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deployment and Pod Commands&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Bash&quot;&gt;
# List all the pods in all namespaces
$ kubectl get pods --all-namespaces 

# Create a POD quickly
$ kubectl run &amp;lt;pod name&amp;gt; --image=busybox --restart=Never -n &amp;lt;your namespace&amp;gt;

# In some cases, you just need the pod yaml
$ kubectl run &amp;lt;pod name&amp;gt; --image=nginx --dry-run=client --restart=Never -n &amp;lt;your namespace&amp;gt; -o yaml

# Rolling Update of the deployment image
$ kubectl set image deployment/&amp;lt;deployment name&amp;gt; &amp;lt;containername&amp;gt;=&amp;lt;new image name&amp;gt;

# Restart the deployment
$ kubectl rollout restart deployment/&amp;lt;deployment name&amp;gt;

# To undo the rollout
$ kubectl rollout undo deployment/&amp;lt;deployment name&amp;gt;

# To know the rollout history of a deployment
$ kubectl rollout history deployment &amp;lt;deployment name&amp;gt;

# To view the logs
$ kubectl logs &amp;lt;podname&amp;gt; --namespace=&amp;lt;namespace name&amp;gt;

# To open the interactive shell to the pod
$ kubectl exec -it &amp;lt;pod name&amp;gt; --namespace=&amp;lt;namespace name&amp;gt; -- /bin/sh

# To check the evens on the pod
$ kubectl describe pod &amp;lt;pod name&amp;gt; | grep -C 10 Events:

# Extract a pod definition yaml file to local file
$ kubectl get pod &amp;lt;podname&amp;gt; -o yaml &amp;gt; &amp;lt;local pod filename&amp;gt;.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Searching or Listing Commands&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;Bash&quot;&gt;
# List the resources in a sorted order by any of the metadata
$ kubectl get services --sort-by=.metadata.name

# Get the particular fields displayed from the resources
# If it is a list then, use names[*].abc
$ kubectl get services -A -o custom-columns=NAME:metadata.name;

# List the resources with specific label
$ kubectl get pod -l &amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;
$ kubectl get pods --selector &amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;

# To list all of the resources matching with the label
$ kubectl get all --selector &amp;lt;lable name&amp;gt;=&amp;lt;label value&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the above command reference is the typical actions we do as a Cloud Developer/Engineer in our day to day activities. But for more references the ocean like documentation available at  &lt;a href=&quot;https://kubernetes.io/docs/home/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;nav aria-label=&quot;Page navigation example&quot;&gt;
      &lt;ul class=&quot;pagination justify-content-center&quot;&gt;
        &lt;li class=&quot;page-item&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;/2020/11/17/use-makefile-for-your-daily-development-tasks.html&quot;&gt;Previous&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class=&quot;page-item&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;/2020/11/19/go-concurrency.html&quot;&gt;Next&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
   /*
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    
    */
    var disqus_config = function () {
    this.page.url = &quot;https://www.parochi.xyz/2020/11/18/day-to-day-kubernetes.html&quot;;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = &quot;20201118&quot;; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://parochi-xyz.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Rajesh</name></author><summary type="html">Last updated Nov 18, 2020 There are multiple resources for the Kubernetes kubectl command line reference. It is very good practice to learn the usage of all those commands. But, here I would like to share the most day to day commands that we use on the terminal to take care of our daily development and debugging activities with respect to Kubernetes.</summary></entry><entry><title type="html">Use Makefile for your daily development tasks</title><link href="http://localhost:4000/2020/11/17/use-makefile-for-your-daily-development-tasks.html" rel="alternate" type="text/html" title="Use Makefile for your daily development tasks" /><published>2020-11-17T00:00:00-08:00</published><updated>2020-11-17T00:00:00-08:00</updated><id>http://localhost:4000/2020/11/17/use-makefile-for-your-daily-development-tasks</id><content type="html" xml:base="http://localhost:4000/2020/11/17/use-makefile-for-your-daily-development-tasks.html">&lt;div class=&quot;view overlay&quot;&gt;
	&lt;img class=&quot;card-img-top&quot; src=&quot;/assets/images/2020-11-17.jpg&quot; alt=&quot;Card image cap&quot; /&gt;
    &lt;a href=&quot;#!&quot;&gt;
        &lt;div class=&quot;mask rgba-white-slight&quot;&gt;&lt;/div&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;&lt;small class=&quot;text-muted&quot;&gt;Last updated Nov 17, 2020&lt;/small&gt;
&lt;br /&gt;
A typical routine of a developer is code, build, unit test, and deploy. Most of the time, developers do all these tasks in their local first and once everything is fine then they move to the next state. This will be a very much repeated process when we work on a microservices architecture.&lt;/p&gt;

&lt;p&gt;From my experience, If I can list out a typical list of tasks for a go language-based microservice. Those are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Clean&lt;/li&gt;
  &lt;li&gt;Format&lt;/li&gt;
  &lt;li&gt;Lint&lt;/li&gt;
  &lt;li&gt;Dependencies&lt;/li&gt;
  &lt;li&gt;Run Unit tests&lt;/li&gt;
  &lt;li&gt;Build&lt;/li&gt;
  &lt;li&gt;Push to Dev Quay&lt;/li&gt;
  &lt;li&gt;Coverage Report&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All these steps can be placed in a simple Makefile and then onwards, the same can be used by anyone to quickly take the charge and move on. This kind is one of the best practices when it comes to day-to-day development activity [I am not denying that there are multiple ways of achieving the same]. Here is the typical Makefile from my experience.&lt;/p&gt;

&lt;p&gt;The below sample make file is specific to Go language-based environment but I believe the idea can be used to leverage with any other project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;Makefile&quot;&gt;
# Enable dependencies and configure the private repo
GO = GO111MODULE=on GOPRIVATE=&amp;lt;your private repo&amp;gt;.cisco.com
EXEFILE = ./bin/&amp;lt;exe file name&amp;gt;
MAIN_GO = &amp;lt;your service main.go file location&amp;gt;

# help messages
help:
    @echo &amp;#39;Available commands for the &amp;lt;your micro service name&amp;gt;&amp;#39;
    @echo &amp;#39;Usage&amp;#39;
    @echo &amp;#39;  all - Run all the available commands&amp;#39;
    @echo &amp;#39;  clean - Run the clean up&amp;#39;
    @echo &amp;#39;  setup -  Run the initial setup instructions&amp;#39;
    @echo &amp;#39;  format - Run code format&amp;#39;
    @echo &amp;#39;  staticanalysis - Run the static code analysis&amp;#39;
    @echo &amp;#39;  dependencies - Run the dependencies&amp;#39;
    @echo &amp;#39;  unittest - Run unit tests&amp;#39;
    @echo &amp;#39;  localbuild - Build the executable&amp;#39;

# Run all the available commands in the below order
all: clean setup dependencies format staticanalysis unittest localbuild

clean:
    @echo &amp;quot;Cleaning the previous executable and coverage reports&amp;quot;
    rm -f coveragereport.out report.json
    rm -f ${EXEFILE }

setup:
    @echo &amp;quot;Add any steps that are needed&amp;quot;
    &amp;lt;some installation tasks&amp;gt;
format:
    @echo &amp;quot;Code Formatting&amp;quot;
    ${GO} fmt ./...
staticanalysis:
    @echo &amp;quot;&amp;quot;
    golangci-lint run -c .golangci.yaml
dependencies:
    @echo &amp;#39; Load Dependencies&amp;#39;
    ${GO} mod tidy
    ${GO} mod download
unittest:
    @echo &amp;quot;Executing Unit tests&amp;quot;
    ${GO} test -v covermode=atomic -count=1 ./... -coverprofile coveragereport.out
    ${GO} test -race test -covermode=atomic -count=1 ./... -json &amp;gt; report.json
localbuild:
    @echo &amp;quot;Loca build&amp;quot;
    ${GO} build -o ${EXEFILE} ${MAIN_GO}
    docker build -t &amp;lt;your tag name&amp;gt; .
    docker tag &amp;lt;your tag name&amp;gt; &amp;lt;your quay repo location&amp;gt;:latest
    docker push &amp;lt;your quay repo location&amp;gt;:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;nav aria-label=&quot;Page navigation&quot;&gt;
      &lt;ul class=&quot;pagination justify-content-center&quot;&gt;
        &lt;li class=&quot;page-item disabled&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Previous&lt;/a&gt;
        &lt;/li&gt;
        &lt;li class=&quot;page-item&quot;&gt;
          &lt;a class=&quot;page-link&quot; href=&quot;/2020/11/18/day-to-day-kubernetes.html&quot;&gt;Next&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/nav&gt;
&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
   /*
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    
    */
    var disqus_config = function () {
    this.page.url = &quot;https://www.parochi.xyz/2020/11/17/use-makefile-for-your-daily-development-tasks.html&quot;;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = &quot;20201117&quot;; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://parochi-xyz.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Rajesh</name></author><summary type="html">Last updated Nov 17, 2020 A typical routine of a developer is code, build, unit test, and deploy. Most of the time, developers do all these tasks in their local first and once everything is fine then they move to the next state. This will be a very much repeated process when we work on a microservices architecture.</summary></entry></feed>